{
  "categories": [
    "engineering"
  ],
  "content": "What are Composable Stable Pool and why do we need them?",
  "created": "2022-12-07T22:56:26.300Z",
  "guideIntegrations": {
    "discordRoleIds": []
  },
  "guideType": "onboarding",
  "key": "composable-stable-pools-balancer",
  "name": "Composable Stable Pools",
  "publishStatus": "Live",
  "showIncorrectOnCompletion": true,
  "steps": [
    {
      "content": "\nThe DeFi ecosystem is full of correlated assets. We see many different tokens based on ETH, for example: wstETH, wETH, aETH, cETH, \nor BTC eg: renBTC, sBTC, WBTC, aWBTC, cWBTC.\n\nIf we try to lend or stake our assets on many of the DeFi Protocols, we get a correlated asset in return.\n\nThere are multiple ways to manage risk when investing an asset. One approach is to spread your investments across multiple \nplatforms. This can be complex, and you need to understand the workflow of each platform. Another, easier way is to swap \nyour token for different ones that are based on the same core asset. This prevents complexity and extra gas fees, but \nstill ensures diversification and returns on your investments.\n\nBeing able to swap large quantities of correlated assets quickly and with minimal price slippage is a big advantage for both \ninstitutional investors and retail users in DeFi. For liquidity providers, in this case, impermanent loss is not as big of a \nconcern (except in rare cases where the depeg's happen).        ",
      "name": "Background",
      "stepItems": [],
      "uuid": "1f9b285b-0f3d-4e02-a6d8-51ebdab5bc09"
    },
    {
      "content": "## Stable Math\nPools that use a constant product invariant (x*y=k) might not be the best option as there can be a lot of slippage, which \nis quite undesirable in the scenario of correlated assets. Constant sum invariant (x+y=k) seems to be more relevant but \ncan end the pool having just single type of tokens.\n\nStable Math's Invariant solves both of these problems and can keep prices more equal as long as the liquidity pool is \nnot extremely unbalanced\n\n<div align=\"center\">\n<img width=\"560\" height=\"315\" src=\"https://github.com/balancer-labs/docs-v2/raw/fc4f11145504bf9bc2dbed3ac30b6ffbe704d0aa/.gitbook/assets/output%20(1).gif\" />\n</div>\n<br/>\n<br/>\nStableSwap approaches Constant Product as A->0 and Constant Sum as A->∞\n\n<br/>\n<br/>\n\n$$\n\nA \\cdot n^n \\cdot \\sum{x_i} +D = A \\cdot D \\cdot n^n + { \\frac{D^{n+1}}{{n}^{n}\\cdot \\prod{x_i} } }\n\n$$\n\n\n<br/>\n\n Where:\n \n * $n$ is the number of tokens \n * $x_i$  is balance of token  $$i$$ \n * $$A$$ is the amplification parameter \n\nMore detail about stable math can be found [here](https://docs.balancer.fi/concepts/math/stable-math)\n\n## Amplification Parameter\nThe A-Factor, also known as the amplification parameter, plays a major role in how flattened the curve will be. This \nparameter controls how much slippage occurs, with higher values resulting in less slippage.\n\nIf the A-Factor is set to zero, the curve will follow a similar path to x*y=k, but with increased slippage. The \nillustration below shows the stable swap invariant with the A-Factor set to zero. Notice the green line:\n\nThe higher the A-Factor is set, the more flattened the curve becomes.\n\nWe can pass `amplificationParameter` to the constructor when creating instance of ComposableStablePool.\n",
      "name": "Stable Math",
      "stepItems": [],
      "uuid": "0943077a-74a0-4317-a3db-fbbb0c2350ce"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "answerKeys": [
            "0c66f840"
          ],
          "choices": [
            {
              "content": "Constant Product",
              "key": "075e30b2"
            },
            {
              "content": "Constant Sum",
              "key": "0c66f840"
            },
            {
              "content": "Constant Mean",
              "key": "5213dee4"
            },
            {
              "content": "Constant Mode",
              "key": "ed20e9c4"
            }
          ],
          "content": "When Amplification Parameter approaches infinity (A->∞) what type of invariant does the pool uses?",
          "type": "SingleChoice",
          "uuid": "0dff0f3b-da4e-4b55-b835-037dac8326d1"
        },
        {
          "answerKeys": [
            "13528715"
          ],
          "choices": [
            {
              "content": "Constant Product",
              "key": "13528715"
            },
            {
              "content": "Constant Sum",
              "key": "8649a72b"
            },
            {
              "content": "Constant Mean",
              "key": "f56b614e"
            },
            {
              "content": "Constant Mode",
              "key": "bf2c338b"
            }
          ],
          "content": "When Amplification Parameter approaches zero (A-> 0) what type of invariant does the pool uses?",
          "type": "SingleChoice",
          "uuid": "274c9c76-96f0-49a0-a3c2-f5e5e9edda0f"
        }
      ],
      "uuid": "2bb8e124-e44b-43dc-a1c6-eb42688a1a27"
    },
    {
      "content": "# ComposableStablePool\n`ComposableStablePool` This is a 5-token stable pool that also contains its own BPT. It also is a type of Balancer Pool that extends from `BasePool`, that uses the authenticate modifier to protect its functions with advanced authorization mechanisms.\n\nSome of the benefits that every pool gets when it inherits from BasePool are:\n1. Emergency Pause - The BasePool inherits from the `TemporarilyPausable` contract, which provides an emergency pause feature within the first 30 days of factory deployment.\n2. Swap Fee management - A simple but important feature is management of the swap fee percentage.\n3. Vault Integration - The Vault is the central point for all pool tokens and related bookkeeping. It is the primary point of interaction for joining, exiting, or swapping pools, and delegates to the appropriate pools as needed.\n\n## Pool Initialization\n`ComposableStablePool` uses the initialization step of Balancer Pools to mint Balancer Pool Tokens(BPT) to the first account that joins them. By minting the entire BPT supply for the initial joiner and then pulling all tokens except those due to the joiner, ComposableStablePool arrives at the desired state of the Pool holding all BPT except the joiner's.\n\n## Balancer Pool Token (BPT)\nBPT is preminted and registered as one of the tokens in the pool during initialization. This allows for token swaps to be made that look like either a single-token join or exit. ComposableStablePool also support regular joins and exits, which can create or destroy BPT.\n\nThe preminted BPT is deposited into the Vault as the initial balance of the Pool. Until it is transferred out of the Pool, it does not belong to any entity. The Pool's arithmetic acts as if BPT doesn't exist. Therefore, the total supply of BPT is not a useful value. ComposableStablePool relies on the 'virtual supply' (how much BPT is actually owned outside the Vault) instead.",
      "name": "Composable Stable Pool",
      "stepItems": [],
      "uuid": "892b3f61-cfe8-4aab-89c1-ea5004425e4e"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "answerKeys": [
            "e58fc9ac"
          ],
          "choices": [
            {
              "content": "2",
              "key": "35f26766"
            },
            {
              "content": "3",
              "key": "9ac9160b"
            },
            {
              "content": "4",
              "key": "6e8e0a7b"
            },
            {
              "content": "5",
              "key": "e58fc9ac"
            }
          ],
          "content": "What is the max number of tokens that we use in ComposableStablePool?",
          "type": "SingleChoice",
          "uuid": "7f6d11cd-2826-4053-bd60-97a3597d9167"
        },
        {
          "answerKeys": [
            "f714279b"
          ],
          "choices": [
            {
              "content": "Same ComposableStablePool",
              "key": "f714279b"
            },
            {
              "content": "New and separate ComposableStablePool",
              "key": "76f041af"
            },
            {
              "content": "Liquidity Bootstrapping Pool",
              "key": "b2b14a8f"
            },
            {
              "content": "Boosted Pool",
              "key": "a1965e13"
            }
          ],
          "content": "When using ComposableStablePool, the BPT that is minted is part of which pool",
          "type": "SingleChoice",
          "uuid": "6cb0e2c3-d31e-44cf-8a16-f2e3749e4524"
        }
      ],
      "uuid": "23529d6f-2fe1-4469-b315-70fe76d7bae4"
    },
    {
      "content": "ComposableStablePool's most elegant feature is its ability to provide a custom Rate Provider for each token.\n\nConstructor of ComposableStablePool takes the following struct as params\n\n```solidity\n    struct NewPoolParams {\n        IVault vault;\n        IProtocolFeePercentagesProvider protocolFeeProvider;\n        string name;\n        string symbol;\n        IERC20[] tokens;\n        IRateProvider[] rateProviders;\n        uint256[] tokenRateCacheDurations;\n        bool[] exemptFromYieldProtocolFeeFlags;\n        uint256 amplificationParameter;\n        uint256 swapFeePercentage;\n        uint256 pauseWindowDuration;\n        uint256 bufferPeriodDuration;\n        address owner;\n    }\n```\nWe can pass a custom rate provider to the constructor for each token. The rate conversion logic is also handled very well when scaling the tokens. Here we can see the `ComposableStablePoolRates.sol` to see how rate provider is actually used.\n\n```solidity\n    /**\n     * @dev Overrides scaling factor getter to compute the tokens' rates.\n     */\n    function _scalingFactors() internal view virtual override returns (uint256[] memory) {\n        // There is no need to check the arrays length since both are based on `_getTotalTokens`\n        uint256 totalTokens = _getTotalTokens();\n        uint256[] memory scalingFactors = new uint256[](totalTokens);\n\n        for (uint256 i = 0; i < totalTokens; ++i) {\n            scalingFactors[i] = _getScalingFactor(i).mulDown(_getTokenRate(i));\n        }\n\n        return scalingFactors;\n    }\n```\n\nThe logic to ensure that tokens are properly scaled when calculating the swapped tokens is already part of BasePool. ComposableStablePool(`ComposableStablePoolRates.sol`) extends it and considers the rate provider also.",
      "name": "Rate Provides",
      "stepItems": [],
      "uuid": "23176d4a-3737-45b3-bd5d-735cb7c5338b"
    },
    {
      "content": "",
      "name": "Evaluation",
      "stepItems": [
        {
          "answerKeys": [
            "6d8549f1"
          ],
          "choices": [
            {
              "content": "The determine by how much decimals do we need to scale the tokens",
              "key": "90502a5a"
            },
            {
              "content": "The determine and apply the token rate when swapping",
              "key": "6d8549f1"
            },
            {
              "content": "To normalize all the token prices to same value",
              "key": "6499a52f"
            },
            {
              "content": "To enhance the security of the pool",
              "key": "fa29c7e6"
            }
          ],
          "content": "What is the role of Rate Providers?",
          "type": "SingleChoice",
          "uuid": "33e126fd-ab42-43d7-b74f-a9a1e1366aec"
        },
        {
          "answerKeys": [
            "04d89a5d"
          ],
          "choices": [
            {
              "content": "Two rate providers are allowed per pool",
              "key": "15ff4fd7"
            },
            {
              "content": "There is no limit",
              "key": "f4f93079"
            },
            {
              "content": "Only one rate provider is allowed per pool",
              "key": "8d3a3c29"
            },
            {
              "content": "Same as the number of tokens used in the pool",
              "key": "04d89a5d"
            }
          ],
          "content": "How many rate providers can we pass to ComposableStablePool?",
          "type": "SingleChoice",
          "uuid": "11fcf92c-8261-461e-95cc-f81d41fd5d25"
        }
      ],
      "uuid": "2aeb9912-445e-4b4c-b4e4-b74f1ce214c1"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/balancer/balancers_fees.png",
  "uuid": "composable-stable-pools-balancer"
}