{
  "categories": [
    "engineering"
  ],
  "content": "What are Composable Stable Pool and why do we need them?",
  "created": "2022-12-07T18:31:51.081Z",
  "guideIntegrations": {
    "discordRoleIds": []
  },
  "guideType": "onboarding",
  "key": "composable-stable-pools-balancer",
  "name": "Composable Stable Pools",
  "publishStatus": "Live",
  "showIncorrectOnCompletion": true,
  "steps": [
    {
      "content": "\nThe DeFi ecosystem is full of correlated assets. We see many different tokens based on ETH, for example: wstETH, wETH, aETH, cETH, \nor BTC eg: renBTC, sBTC, WBTC, aWBTC, cWBTC.\n\nIf we try to lend or stake our assets on many of the DeFi Protocols, we get a correlated asset in return.\n\nThere are multiple ways to manage risk when investing an asset. One approach is to spread your investments across multiple \nplatforms. This can be complex, and you need to understand the workflow of each platform. Another, easier way is to swap \nyour token for different ones that are based on the same core asset. This prevents complexity and extra gas fees, but \nstill ensures diversification and returns on your investments.\n\nBeing able to swap large quantities of correlated assets quickly and with minimal price slippage is a big advantage for both \ninstitutional investors and retail users in DeFi. For liquidity providers, in this case, impermanent loss is not as big of a \nconcern (except in rare cases where the depeg's happen).        ",
      "name": "Background",
      "stepItems": [],
      "uuid": "1f9b285b-0f3d-4e02-a6d8-51ebdab5bc09"
    },
    {
      "content": "## Stable Math\nPools that use a constant product invariant (x*y=k) might not be the best option as there can be a lot of slippage, which \nis quite undesirable in the scenario of correlated assets. Constant sum invariant (x+y=k) seems to be more relevant but \ncan end the pool having just single type of tokens.\n\nStable Math's Invariant solves both of these problems and can keep prices more equal as long as the liquidity pool is \nnot extremely unbalanced\n\n![StableSwap approaches Constant Product as A->0 and Constant Sum as A->âˆž](https://github.com/balancer-labs/docs-v2/raw/fc4f11145504bf9bc2dbed3ac30b6ffbe704d0aa/.gitbook/assets/output%20(1).gif)\n\n $$\n\n A \\cdot n^n \\cdot \\sum{x_i} +D = A \\cdot D \\cdot n^n + { \\frac{D^{n+1}}{{n}^{n}\\cdot \\prod{x_i} } }\n\n$$\n\n\n Where:\n \n * $n$ is the number of tokens \n * $x_i$  is balance of token  $$i$$ \n * $$A$$ is the amplification parameter \n\nMore detail about stable math can be found [here](https://docs.balancer.fi/concepts/math/stable-math)\n\n## Amplification Parameter\nThe A-Factor, also known as the amplification parameter, plays a major role in how flattened the curve will be. This \nparameter controls how much slippage occurs, with higher values resulting in less slippage.\n\nIf the A-Factor is set to zero, the curve will follow a similar path to x*y=k, but with increased slippage. The \nillustration below shows the stable swap invariant with the A-Factor set to zero. Notice the green line:\n\nThe higher the A-Factor is set, the more flattened the curve becomes.\n\nWe can pass `amplificationParameter` to the constructor when creating instance of ComposableStablePool.\n",
      "name": "Stable Math",
      "stepItems": [],
      "uuid": "0943077a-74a0-4317-a3db-fbbb0c2350ce"
    }
  ],
  "thumbnail": "https://d31h13bdjwgzxs.cloudfront.net/academy/balancer/balancers_fees.png",
  "uuid": "composable-stable-pools-balancer"
}