categories:
  - engineering
content: What are Composable Stable Pool and why do we need them?
created: '2022-12-08T08:44:05.139Z'
guideIntegrations:
  discordRoleIds: []
guideType: onboarding
key: composable-stable-pools-balancer
name: Composable Stable Pools
publishStatus: Live
showIncorrectOnCompletion: true
steps:
  - content: >-

      The DeFi ecosystem is full of correlated assets. We see many different
      tokens based on ETH, for example: wstETH, wETH, aETH, cETH, 

      or BTC eg: renBTC, sBTC, WBTC, aWBTC, cWBTC.


      If we try to lend or stake our assets on many of the DeFi Protocols, we
      get a correlated asset in return.


      There are multiple ways to manage risk when investing an asset. One
      approach is to spread your investments across multiple 

      platforms. This can be complex, and you need to understand the workflow of
      each platform. Another, easier way is to swap 

      your token for different ones that are based on the same core asset. This
      prevents complexity and extra gas fees, but 

      still ensures diversification and returns on your investments.


      Being able to swap large quantities of correlated assets quickly and with
      minimal price slippage is a big advantage for both 

      institutional investors and retail users in DeFi. For liquidity providers,
      in this case, impermanent loss is not as big of a 

      concern (except in rare cases where the depeg's happen).        
    name: Background
    stepItems: []
    uuid: 1f9b285b-0f3d-4e02-a6d8-51ebdab5bc09
  - content: >
      ## Stable Math

      Pools that use a constant product invariant (x*y=k) might not be the best
      option as there can be a lot of slippage, which 

      is quite undesirable in the scenario of correlated assets. Constant sum
      invariant (x+y=k) seems to be more relevant but 

      can end the pool having just single type of tokens.


      Stable Math's Invariant solves both of these problems and can keep prices
      more equal as long as the liquidity pool is 

      not extremely unbalanced


      <div align="center">

      <img width="560" height="315"
      src="https://github.com/balancer-labs/docs-v2/raw/fc4f11145504bf9bc2dbed3ac30b6ffbe704d0aa/.gitbook/assets/output%20(1).gif"
      />

      </div>

      <br/>

      <br/>

      StableSwap approaches Constant Product as A->0 and Constant Sum as A->∞


      <br/>

      <br/>


      $$


      A \cdot n^n \cdot \sum{x_i} +D = A \cdot D \cdot n^n + {
      \frac{D^{n+1}}{{n}^{n}\cdot \prod{x_i} } }


      $$



      <br/>

       Where:
       
       * $n$ is the number of tokens 
       * $x_i$  is balance of token  $$i$$ 
       * $$A$$ is the amplification parameter 

      More detail about stable math can be found
      [here](https://docs.balancer.fi/concepts/math/stable-math)


      ## Amplification Parameter

      The A-Factor, also known as the amplification parameter, plays a major
      role in how flattened the curve will be. This 

      parameter controls how much slippage occurs, with higher values resulting
      in less slippage.


      If the A-Factor is set to zero, the curve will follow a similar path to
      x*y=k, but with increased slippage. The 

      illustration below shows the stable swap invariant with the A-Factor set
      to zero. Notice the green line:


      The higher the A-Factor is set, the more flattened the curve becomes.


      We can pass `amplificationParameter` to the constructor when creating
      instance of ComposableStablePool.
    name: Stable Math
    stepItems: []
    uuid: 0943077a-74a0-4317-a3db-fbbb0c2350ce
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - 0c66f840
        choices:
          - content: Constant Product
            key: 075e30b2
          - content: Constant Sum
            key: 0c66f840
          - content: Constant Mean
            key: 5213dee4
          - content: Constant Mode
            key: ed20e9c4
        content: >-
          When Amplification Parameter approaches infinity (A->∞) what type of
          invariant does the pool uses?
        type: SingleChoice
        uuid: 0dff0f3b-da4e-4b55-b835-037dac8326d1
      - answerKeys:
          - '13528715'
        choices:
          - content: Constant Product
            key: '13528715'
          - content: Constant Sum
            key: 8649a72b
          - content: Constant Mean
            key: f56b614e
          - content: Constant Mode
            key: bf2c338b
        content: >-
          When Amplification Parameter approaches zero (A-> 0) what type of
          invariant does the pool uses?
        type: SingleChoice
        uuid: 274c9c76-96f0-49a0-a3c2-f5e5e9edda0f
    uuid: 2bb8e124-e44b-43dc-a1c6-eb42688a1a27
  - content: >-
      # ComposableStablePool

      `ComposableStablePool` This is a 5-token stable pool that also contains
      its own BPT. It also is a type of Balancer Pool that extends from
      `BasePool`, that uses the authenticate modifier to protect its functions
      with advanced authorization mechanisms.


      Some of the benefits that every pool gets when it inherits from BasePool
      are:

      1. Emergency Pause - The BasePool inherits from the `TemporarilyPausable`
      contract, which provides an emergency pause feature within the first 30
      days of factory deployment.

      2. Swap Fee management - A simple but important feature is management of
      the swap fee percentage.

      3. Vault Integration - The Vault is the central point for all pool tokens
      and related bookkeeping. It is the primary point of interaction for
      joining, exiting, or swapping pools, and delegates to the appropriate
      pools as needed.


      ## Pool Initialization

      `ComposableStablePool` uses the initialization step of Balancer Pools to
      mint Balancer Pool Tokens(BPT) to the first account that joins them. By
      minting the entire BPT supply for the initial joiner and then pulling all
      tokens except those due to the joiner, ComposableStablePool arrives at the
      desired state of the Pool holding all BPT except the joiner's.


      ## Balancer Pool Token (BPT)

      BPT is preminted and registered as one of the tokens in the pool during
      initialization. This allows for token swaps to be made that look like
      either a single-token join or exit. ComposableStablePool also support
      regular joins and exits, which can create or destroy BPT.


      The preminted BPT is deposited into the Vault as the initial balance of
      the Pool. Until it is transferred out of the Pool, it does not belong to
      any entity. The Pool's arithmetic acts as if BPT doesn't exist. Therefore,
      the total supply of BPT is not a useful value. ComposableStablePool relies
      on the 'virtual supply' (how much BPT is actually owned outside the Vault)
      instead.
    name: Composable Stable Pool
    stepItems: []
    uuid: 892b3f61-cfe8-4aab-89c1-ea5004425e4e
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - e58fc9ac
        choices:
          - content: '2'
            key: 35f26766
          - content: '3'
            key: 9ac9160b
          - content: '4'
            key: 6e8e0a7b
          - content: '5'
            key: e58fc9ac
        content: What is the max number of tokens that we use in ComposableStablePool?
        type: SingleChoice
        uuid: 7f6d11cd-2826-4053-bd60-97a3597d9167
      - answerKeys:
          - f714279b
        choices:
          - content: Same ComposableStablePool
            key: f714279b
          - content: New and separate ComposableStablePool
            key: 76f041af
          - content: Liquidity Bootstrapping Pool
            key: b2b14a8f
          - content: Boosted Pool
            key: a1965e13
        content: >-
          When using ComposableStablePool, the BPT that is minted is part of
          which pool
        type: SingleChoice
        uuid: 6cb0e2c3-d31e-44cf-8a16-f2e3749e4524
    uuid: 23529d6f-2fe1-4469-b315-70fe76d7bae4
  - content: >-
      ComposableStablePool's most elegant feature is its ability to provide a
      custom Rate Provider for each token.


      Constructor of ComposableStablePool takes the following struct as params


      ```solidity
          struct NewPoolParams {
              IVault vault;
              IProtocolFeePercentagesProvider protocolFeeProvider;
              string name;
              string symbol;
              IERC20[] tokens;
              IRateProvider[] rateProviders;
              uint256[] tokenRateCacheDurations;
              bool[] exemptFromYieldProtocolFeeFlags;
              uint256 amplificationParameter;
              uint256 swapFeePercentage;
              uint256 pauseWindowDuration;
              uint256 bufferPeriodDuration;
              address owner;
          }
      ```

      We can pass a custom rate provider to the constructor for each token. The
      rate conversion logic is also handled very well when scaling the tokens.
      Here we can see the `ComposableStablePoolRates.sol` to see how rate
      provider is actually used.


      ```solidity
          /**
           * @dev Overrides scaling factor getter to compute the tokens' rates.
           */
          function _scalingFactors() internal view virtual override returns (uint256[] memory) {
              // There is no need to check the arrays length since both are based on `_getTotalTokens`
              uint256 totalTokens = _getTotalTokens();
              uint256[] memory scalingFactors = new uint256[](totalTokens);

              for (uint256 i = 0; i < totalTokens; ++i) {
                  scalingFactors[i] = _getScalingFactor(i).mulDown(_getTokenRate(i));
              }

              return scalingFactors;
          }
      ```


      The logic to ensure that tokens are properly scaled when calculating the
      swapped tokens is already part of BasePool.
      ComposableStablePool(`ComposableStablePoolRates.sol`) extends it and
      considers the rate provider also.
    name: Rate Provides
    stepItems: []
    uuid: 23176d4a-3737-45b3-bd5d-735cb7c5338b
  - content: ''
    name: Evaluation
    stepItems:
      - answerKeys:
          - 6d8549f1
        choices:
          - content: The determine by how much decimals do we need to scale the tokens
            key: 90502a5a
          - content: The determine and apply the token rate when swapping
            key: 6d8549f1
          - content: To normalize all the token prices to same value
            key: 6499a52f
          - content: To enhance the security of the pool
            key: fa29c7e6
        content: What is the role of Rate Providers?
        type: SingleChoice
        uuid: 33e126fd-ab42-43d7-b74f-a9a1e1366aec
      - answerKeys:
          - 04d89a5d
        choices:
          - content: Two rate providers are allowed per pool
            key: 15ff4fd7
          - content: There is no limit
            key: f4f93079
          - content: Only one rate provider is allowed per pool
            key: 8d3a3c29
          - content: Same as the number of tokens used in the pool
            key: 04d89a5d
        content: How many rate providers can we pass to ComposableStablePool?
        type: SingleChoice
        uuid: 11fcf92c-8261-461e-95cc-f81d41fd5d25
    uuid: 2aeb9912-445e-4b4c-b4e4-b74f1ce214c1
  - content: >-
      You can easily extend Balancer's Composable Stable Pools by installing the
      package containing `ComposableStablePool.sol`.


      ```

      npm i @balancer-labs/v2-pool-stable

      ``` 


      Here are the first few lines of `ComposableStablePool.sol` and it explains
      how the code is structured.

      ```

      /**
       * @dev StablePool with preminted BPT and rate providers for each token, allowing for e.g. wrapped tokens with a known
       * price ratio, such as Compound's cTokens.
       *
       * BPT is preminted on Pool initialization and registered as one of the Pool's tokens, allowing for swaps to behave as
       * single-token joins or exits (by swapping a token for BPT). We also support regular joins and exits, which can mint
       * and burn BPT.
       *
       * Preminted BPT is deposited in the Vault as the initial balance of the Pool, and doesn't belong to any entity until
       * transferred out of the Pool. The Pool's arithmetic behaves as if it didn't exist, and the BPT total supply is not
       * a useful value: we rely on the 'virtual supply' (how much BPT is actually owned outside the Vault) instead.
       */
      contract ComposableStablePool is
          IRateProvider,
          BaseGeneralPool,
          StablePoolAmplification,
          ComposableStablePoolRates,
          ComposableStablePoolProtocolFees
      {
          using FixedPoint for uint256;
          using PriceRateCache for bytes32;
          using StablePoolUserData for bytes;
          using BasePoolUserData for bytes;

          // The maximum imposed by the Vault, which stores balances in a packed format, is 2**(112) - 1.
          // We are preminting half of that value (rounded up).
          uint256 private constant _PREMINTED_TOKEN_BALANCE = 2**(111);

          // The constructor arguments are received in a struct to work around stack-too-deep issues
          struct NewPoolParams {
              IVault vault;
              IProtocolFeePercentagesProvider protocolFeeProvider;
              string name;
              string symbol;
              IERC20[] tokens;
              IRateProvider[] rateProviders;
              uint256[] tokenRateCacheDurations;
              bool[] exemptFromYieldProtocolFeeFlags;
              uint256 amplificationParameter;
              uint256 swapFeePercentage;
              uint256 pauseWindowDuration;
              uint256 bufferPeriodDuration;
              address owner;
          }

          constructor(NewPoolParams memory params)
              BasePool(
                  params.vault,
                  IVault.PoolSpecialization.GENERAL,
                  params.name,
                  params.symbol,
                  _insertSorted(params.tokens, IERC20(this)),
                  new address[](params.tokens.length + 1),
                  params.swapFeePercentage,
                  params.pauseWindowDuration,
                  params.bufferPeriodDuration,
                  params.owner
              )
              StablePoolAmplification(params.amplificationParameter)
              ComposableStablePoolStorage(_extractStorageParams(params))
              ComposableStablePoolRates(_extractRatesParams(params))
              ProtocolFeeCache(
                  params.protocolFeeProvider,
                  ProviderFeeIDs({ swap: ProtocolFeeType.SWAP, yield: ProtocolFeeType.YIELD, aum: ProtocolFeeType.AUM })
              )
          {
              // solhint-disable-previous-line no-empty-blocks
          }

      ``` 
    name: Extend  Composable Stable Pools
    stepItems: []
    uuid: 6f649721-5e7e-4137-b4c7-c997fee374fc
thumbnail: https://d31h13bdjwgzxs.cloudfront.net/academy/balancer/balancers_fees.png
uuid: composable-stable-pools-balancer
